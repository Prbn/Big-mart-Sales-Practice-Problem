{
    "collab_server" : "",
    "contents" : "# Importing Data\n#---------------\n\n# setting up new working directory using the\nsetwd(\"D:\\\\Work\\\\R\\\\R Projects\\\\Big mart Sales Practice Problem\\\\DATA\")\n\n# putting the data frame into an object called stats\ntest.d <- read.csv(\"Test_u94Q5KV.csv\", stringsAsFactors = F, na.strings = c('') )\ntrain.d <- read.csv(\"Train_UWu5bXk.csv\", stringsAsFactors = F, na.strings = c(''))\n\n# --------------------------\n\n# Load packages\n# -----------------------\n\nlibrary('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm\n\n# -----------------\n\ntotalsummary <- function(data.df){\n  st <- str(data.df)\n  hd <- head(data.df,n=6)\n  sm <- summary(data.df)\n  output <- list(Structure=st , Head=hd , Summary=sm)\n  return(output)\n}\n\ntotalsummary(train.d)\ntotalsummary(test.d)\n\n# bind training & test data\nfull.d  <- bind_rows(train.d, test.d)\ntotalsummary(full.d)\n\n# Variable Editing\n# Most of the variable are factors so convertion most variables into factor\n# Factorizing\nfull.d$Item_Identifier <- as.factor(full.d$Item_Identifier)\nfull.d$Item_Fat_Content <- as.factor(full.d$Item_Fat_Content)\nfull.d$Item_Type <- as.factor(full.d$Item_Type)\nfull.d$Outlet_Identifier <- as.factor(full.d$Outlet_Identifier)\nfull.d$Outlet_Establishment_Year <- as.factor(full.d$Outlet_Establishment_Year)\nfull.d$Outlet_Size <- as.factor(full.d$Outlet_Size)\nfull.d$Outlet_Location_Type <- as.factor(full.d$Outlet_Location_Type)\nfull.d$Outlet_Type <- as.factor(full.d$Outlet_Type)\n# OR\nif(FALSE){\nfactor_vars <- c('Item_Identifier','Item_Fat_Content','Item_Type','Outlet_Identifier','Outlet_Establishment_Year','Outlet_Size','Outlet_Location_Type','Outlet_Type')\nfull.d[factor_vars] <- sapply(full.d[factor_vars], function(x) as.factor(x))\n\nstr(full.d)\nrm(factor_vars)\n# Faild onlu works on lists\n}\n\n### MISSING DATA ###\n#==================#\n\n\n# Exploring the missing data\nfull.d[!complete.cases(full.d),]\n# Number of incomplete Rows\nnrow(full.d[!complete.cases(full.d),])\n\n# Rows that are missing data of Item_weight #\n#-------------------------------------------#\nhead(full.d[is.na(full.d$Item_Weight),])\n# Number of rows, missing data of Item Weight\nnrow(full.d[is.na(full.d$Item_Weight),])\n\n# The data can be imputed from the mean of other same data of same item\n# Taking care of missing data\nif(FALSE){\n  # EXPLAINATION\n  is.na(full.d$Item_Weight)\n  full.d[is.na(full.d$Item_Weight)]\n  full.d[is.na(full.d$Item_Weight),'Item_Weight']\n\n  full.d[is.na(full.d$Item_Weight),'Item_Identifier']\n\n  mean(full.d$Item_Weight, na.rm = TRUE)\n  mean(full.d['Item_Weight'], na.rm = TRUE)\n  mean(full.d[full.d$Item_Identifier==x, 'Item_Weight'], na.rm = TRUE)\n  sapply(full.d[is.na(full.d$Item_Weight),'Item_Identifier'],function(x)mean(full.d[full.d$Item_Identifier==x, 'Item_Weight'], na.rm = TRUE))\n}\n# Replacing missing data with mean of same item identity\nfull.d[is.na(full.d$Item_Weight),'Item_Weight'] <- sapply(full.d[is.na(full.d$Item_Weight),'Item_Identifier'],function(x)mean(full.d[full.d$Item_Identifier==x, 'Item_Weight'], na.rm = TRUE))\n\n# have all been replaced?\nnrow(full.d[is.na(full.d$Item_Weight),])==0\n\n\n\n# Rows that are missing data of Item_Fat_Content #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Fat_Content),])\n# Number of rows, missing data of Item Fat Content\nnrow(full.d[is.na(full.d$Item_Fat_Content),])\n# No missing data\n\n# Exploring different types of Item_Fat_Content\nlevels(full.d$Item_Fat_Content)\n# There are actuall two types only\ntable(full.d$Item_Fat_Content)\n\n# Correcting\nfull.d[full.d$Item_Fat_Content =='LF'| full.d$Item_Fat_Content =='low fat', 'Item_Fat_Content'] <- 'Low Fat'\nfull.d[full.d$Item_Fat_Content =='reg', 'Item_Fat_Content'] <- 'Regular'\n\n# Checking\ntable(full.d$Item_Fat_Content)\nlevels(full.d$Item_Fat_Content)\n\n\n# Refactorizing\nfull.d$Item_Fat_Content <- as.factor(as.character(full.d$Item_Fat_Content))\n\n# Checking\ntable(full.d$Item_Fat_Content)\nlevels(full.d$Item_Fat_Content)\n\n# Rows that are missing data of Item_Visibility #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Visibility),])\n# Number of rows, missing data of Item Visibility\nnrow(full.d[is.na(full.d$Item_Visibility),])\n# No missing data\n\n\n# Rows that are missing data of Item_Type #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Type),])\n# Number of rows, missing data of Item Type\nnrow(full.d[is.na(full.d$Item_Type),])\n# No missing data\n\n# Exploring different types of Item_Type\nlevels(full.d$Item_Type)\ntable(full.d$Item_Type)\n\n# Rows that are missing data of Item_MRP #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_MRP),])\n# Number of rows, missing data of Item MRP\nnrow(full.d[is.na(full.d$Item_MRP),])\n# No missing data\n\n# Exploring different types of Item MRP\nlevels(full.d$Item_MRP)\ntable(full.d$Item_MRP)\n\n# Rows that are missing data of Outlet_Establishment_Year #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Establishment_Year),])\n# Number of rows, missing data of Outlet Establishment Year\nnrow(full.d[is.na(full.d$Outlet_Establishment_Year),])\n# No missing data\n\n# Exploring different types of Outlet Establishment Year\nlevels(full.d$Outlet_Establishment_Year)\ntable(full.d$Outlet_Establishment_Year)\n\n# Rows that are missing data of Outlet_Identifier #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Identifier),])\n# Number of rows, missing data of Outlet Size\nnrow(full.d[is.na(full.d$Outlet_Identifier),])\n# No missing data\n\n# Exploring different types of Outlet Size\nfactor(full.d$Item_Identifier)\nlevels(full.d$Outlet_Identifier)\ntable(full.d$Outlet_Identifier)\n\n# Rows that are missing data of Outlet_Size #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Size),])\n# Number of rows, missing data of Outlet Size\nnrow(full.d[is.na(full.d$Outlet_Size),])\n# No missing data\n\n# Exploring different types of Outlet Size\nlevels(full.d$Outlet_Size)\ntable(full.d$Outlet_Size)\n\nif (FALSE){\nhead(full.d[is.na(full.d$Outlet_Size),'Outlet_Identifier'])\nAa <- 'OUT045'\nfull.d[full.d$Outlet_Identifier == Aa,]\nfull.d[full.d$Outlet_Identifier == Aa,'Outlet_Size']\nlength(full.d[full.d$Outlet_Identifier == Aa,'Outlet_Size'])\nsum(!is.na(full.d[full.d$Outlet_Identifier == Aa,'Outlet_Size']))\n}\nsapply(full.d[is.na(full.d$Outlet_Size),'Outlet_Identifier'],function(x)sum(!is.na(full.d[full.d$Outlet_Identifier == x,'Outlet_Size'])))\n# It seems the data of outlet of the store id not present.\n\n# are present store size are all correct\nAa <- table(full.d$Outlet_Identifier,full.d$Outlet_Size)\n\nstoresize.d <- data.frame(Outlet_Identifier=levels(full.d$Outlet_Identifier))\nstoresize.d$sumsales <- sapply(storesize.d$Outlet_Identifier,function(x)sum(full.d[full.d$Outlet_Identifier==x,'Item_Outlet_Sales'],na.rm = TRUE))\nstoresize.d$Outlet_size <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Size']))\nstoresize.d$Outlet_Location_Type <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Location_Type']))\nstoresize.d$Outlet_Type <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Type']))\nstoresize.d$Number_of_Item <- sapply(storesize.d$Outlet_Identifier,function(x)length(unique(full.d[full.d$Outlet_Identifier==x,'Item_Identifier'])))\nstoresize.d$Outlet_Establishment_Year <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Establishment_Year']))\nstr(storesize.d)\n\n\n# Imputing missing Outlet Size values by predictive imputation\n# Predictive imputation\n# Create a predicting model based on other variables.\n\n# Creating a model predicting Outlet Size based on other variables.\n\n# Using 'mice' package. (Multivariate Imputation by Chained Equations)\n# 'rpart' (recursive partitioning for regression) can also be used.\n# Steps for mice imputation\n# 1. Factorize the factor variables.\n# 2. Perform mice imputation.\n\n# Setting a random Seed\nset.seed(129)\n\n# Performing mice imputation\n?mice()\n# Excluding certain less-than-useful variables:\nmice_mod <- mice(storesize.d[,!names(storesize.d) %in% 'Outlet_Identifier'], method='rf') \n# The methord here is Random Forest \n?names()\n# Saving the complete output\nmice_output <- complete(mice_mod)\n?complete()\n\n# Store Size\nstoresize.d$Outlet_size <- mice_output$Outlet_size\n\n# clearing mice variables\nrm(mice_mod,mice_output)\n\n# Backing up data\nBackup1 <- full.d\n\n# impuding missing values\nfull.d[is.na(full.d$Outlet_Size),'Outlet_Size'] <- sapply(as.character(full.d[is.na(full.d$Outlet_Size),'Outlet_Identifier']),function(x)storesize.d[storesize.d$Outlet_Identifier==x,'Outlet_size'])\n# as.character() is used as the factors actual value may be different\n\n\n\n\n# Rows that are missing data of Outlet_Location_Type #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Location_Type),])\n# Number of rows, missing data of Outlet Location Type\nnrow(full.d[is.na(full.d$Outlet_Location_Type),])\n# No missing data\n\n# Exploring different types of Outlet Location Type\nlevels(full.d$Outlet_Location_Type)\ntable(full.d$Outlet_Location_Type)\n\n# Rows that are missing data of Outlet_Type #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Type),])\n# Number of rows, missing data of Outlet Type\nnrow(full.d[is.na(full.d$Outlet_Type),])\n# No missing data\n\n# Exploring different types of Outlet Type\nlevels(full.d$Outlet_Type)\ntable(full.d$Outlet_Identifier,full.d$Outlet_Type)\n\n# Rows that are missing data of Item_Outlet_Sales #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Outlet_Sales),])\n# Number of rows, missing data of Outlet Sales\nnrow(full.d[is.na(full.d$Item_Outlet_Sales),])\n# No missing data\n\n\n# Preprocessing #\n#===============#\nstr(full.d)\nbackup2 <- full.d\n\n# Encoding Categorical data\nfull.d$Item_Fat_Content <- factor(full.d$Item_Fat_Content,levels = levels(full.d$Item_Fat_Content),labels = c(1:nlevels(full.d$Item_Fat_Content)))\nfull.d$Item_Type <- factor(full.d$Item_Type,levels = levels(full.d$Item_Type),labels = c(1:nlevels(full.d$Item_Type)))\nfull.d$Outlet_Establishment_Year <- factor(full.d$Outlet_Establishment_Year,levels = levels(full.d$Outlet_Establishment_Year),labels = c(1:nlevels(full.d$Outlet_Establishment_Year)))\nfull.d$Outlet_Size <- factor(full.d$Outlet_Size,levels = levels(full.d$Outlet_Size),labels = c(1:nlevels(full.d$Outlet_Size)))\nfull.d$Outlet_Location_Type <- factor(full.d$Outlet_Location_Type,levels = levels(full.d$Outlet_Location_Type),labels = c(1:nlevels(full.d$Outlet_Location_Type)))\nfull.d$Outlet_Type <- factor(full.d$Outlet_Type,levels = levels(full.d$Outlet_Type),labels = c(1:nlevels(full.d$Outlet_Type)))\n\n\n# removing the ids\nfull.d$Item_Identifier <- NULL\nfull.d$Outlet_Identifier <- NULL\n\n### Splitting the data back into the original test and training sets.\ntrainA<- full.d[!is.na(full.d$Item_Outlet_Sales),]\ntestA <- full.d[is.na(full.d$Item_Outlet_Sales),]\n\n\n### Predictive Modeling ###\n#=========================#\n\n# Multiple Linear Model\n# ---------------------\n\n# Fitting Multiple Linear Regression to the training set.\n# Using the lm() function\n# creating regressor variable to store the linearmodel\nregressor = lm(formula = Item_Outlet_Sales ~ ., data = trainA)\n# formula = Profit ~ . is same as formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State\n\n# Information of the regressor\n# Using summary function\nsummary(regressor)\n# The function has feature to avoid dummy variable trap\n\n# Predicting the Test set results\n# Using the predict() function\n# storing the prediction into a functon\ny_pred <- predict(regressor,newdata = testA)\n# Requirs the liner model to use as a basis to predict\n# newdata is the data on which the prediction is to be made\n\n# Building the optimal model\n\n# Using Backward Elimination\n# Starting with all the independent variables\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Weight + Item_Fat_Content + \n                 Item_Visibility + Item_Type +Item_MRP + Outlet_Establishment_Year +\n                 Outlet_Size + Outlet_Location_Type + Outlet_Type,\n               data = trainA)\n# Then remove the non-significant independent variable\n# Using the summary function to find the non-significant independent variable\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Weight + Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Establishment_Year +\n                 Outlet_Size + Outlet_Location_Type + Outlet_Type,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Establishment_Year +\n                 Outlet_Size + Outlet_Location_Type + Outlet_Type,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Establishment_Year +\n                 Outlet_Size + Outlet_Location_Type,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + factor(Outlet_Establishment_Year, exclude = '4') +\n                 Outlet_Size + Outlet_Location_Type,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\nregressor = lm(formula = Item_Outlet_Sales ~ Item_MRP + factor(Outlet_Establishment_Year, exclude = '4') +\n                 Outlet_Size,\n               data = trainA)\nsummary(regressor)\n# Removing the insignificant indpendent variable\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + factor(Outlet_Establishment_Year, exclude = '4') +\n                 Outlet_Size,\n               data = trainA)\nsummary(regressor)\n\n\n###\nrm(regressor,dataset,test_set,training_set,split,y_pred)\n",
    "created" : 1513156814580.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "77|10|89|0|\n",
    "hash" : "1513214979",
    "id" : "C3D6127B",
    "lastKnownWriteTime" : 1514507861,
    "last_content_update" : 1514507861868,
    "path" : "D:/Work/R/R Projects/Big mart Sales Practice Problem/Big Mart/MAIN.R",
    "project_path" : "MAIN.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}