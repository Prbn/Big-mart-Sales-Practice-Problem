{
    "collab_server" : "",
    "contents" : "# A 1\n\n\n# Importing Data\n#---------------\n\n# setting up new working directory using the\nsetwd(\"D:\\\\Work\\\\R\\\\R Projects\\\\Big mart Sales Practice Problem\\\\DATA\")\n\n# putting the data frame into an object called stats\ntest.d <- read.csv(\"Test_u94Q5KV.csv\", stringsAsFactors = F, na.strings = c('') )\ntrain.d <- read.csv(\"Train_UWu5bXk.csv\", stringsAsFactors = F, na.strings = c(''))\n\n# --------------------------\n\n# Loading packages\n# -----------------------\n\nlibrary('ggplot2') # visualization\nlibrary('ggthemes') # visualization\nlibrary('scales') # visualization\nlibrary('dplyr') # data manipulation\nlibrary('mice') # imputation\nlibrary('randomForest') # classification algorithm\nlibrary('lubridate') # For date and time\n\ntotalsummary <- function(data.df){\n  st <- str(data.df)\n  hd <- head(data.df,n=6)\n  sm <- summary(data.df)\n  output <- list(Structure=st , Head=hd , Summary=sm)\n  return(output)\n}\n\n\n# Data Preperation #\n# ================ #\n\n# bind training & test data\nfull.d  <- bind_rows(train.d, test.d)\ntotalsummary(full.d)\n\n# Variable Editing\n\n# Factorizing\nfull.d$Item_Identifier <- as.factor(full.d$Item_Identifier)\nfull.d$Item_Fat_Content <- as.factor(full.d$Item_Fat_Content)\nfull.d$Item_Type <- as.factor(full.d$Item_Type)\nfull.d$Outlet_Identifier <- as.factor(full.d$Outlet_Identifier)\n#full.d$Outlet_Establishment_Year <- as.factor(full.d$Outlet_Establishment_Year)\nfull.d$Outlet_Size <- as.factor(full.d$Outlet_Size)\nfull.d$Outlet_Location_Type <- as.factor(full.d$Outlet_Location_Type)\nfull.d$Outlet_Type <- as.factor(full.d$Outlet_Type)\n\n\n### MISSING DATA ###\n#==================#\n\n\n# Exploring the missing data\nfull.d[!complete.cases(full.d),]\n# Number of incomplete Rows\nnrow(full.d[!complete.cases(full.d),])\n\n# Rows that are missing data of Item_weight #\n#-------------------------------------------#\nhead(full.d[is.na(full.d$Item_Weight),])\n# Number of rows, missing data of Item Weight\nnrow(full.d[is.na(full.d$Item_Weight),])\n\n# The data can be imputed from the mean of other same data of same item\n# Taking care of missing data\n\n# Replacing missing data with mean of same item identity\nfull.d[is.na(full.d$Item_Weight),'Item_Weight'] <- sapply(full.d[is.na(full.d$Item_Weight),'Item_Identifier'],function(x)mean(full.d[full.d$Item_Identifier==x, 'Item_Weight'], na.rm = TRUE))\n\n# Have all been replaced?\nnrow(full.d[is.na(full.d$Item_Weight),])==0\n\n\n\n# Rows that are missing data of Item_Fat_Content #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Fat_Content),])\n# Number of rows, missing data of Item Fat Content\nnrow(full.d[is.na(full.d$Item_Fat_Content),])\n# No missing data\n\n# Exploring different types of Item_Fat_Content\nlevels(full.d$Item_Fat_Content)\n# There are actuall two types only\ntable(full.d$Item_Fat_Content)\n\n# Correcting\nfull.d[full.d$Item_Fat_Content =='LF'| full.d$Item_Fat_Content =='low fat', 'Item_Fat_Content'] <- 'Low Fat'\nfull.d[full.d$Item_Fat_Content =='reg', 'Item_Fat_Content'] <- 'Regular'\n\n# Checking\ntable(full.d$Item_Fat_Content)\nlevels(full.d$Item_Fat_Content)\n\n# Refactorizing\nfull.d$Item_Fat_Content <- as.factor(as.character(full.d$Item_Fat_Content))\n\n# Checking\ntable(full.d$Item_Fat_Content)\nlevels(full.d$Item_Fat_Content)\n\n# Rows that are missing data of Item_Visibility #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Visibility),])\n# Number of rows, missing data of Item Visibility\nnrow(full.d[is.na(full.d$Item_Visibility),])\n# No missing data\n\n\n# Rows that are missing data of Item_Type #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Type),])\n# Number of rows, missing data of Item Type\nnrow(full.d[is.na(full.d$Item_Type),])\n# No missing data\n\n# Exploring different types of Item_Type\nlevels(full.d$Item_Type)\ntable(full.d$Item_Type)\n\n# Rows that are missing data of Item_MRP #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_MRP),])\n# Number of rows, missing data of Item MRP\nnrow(full.d[is.na(full.d$Item_MRP),])\n# No missing data\n\n# Exploring different types of Item MRP\nlevels(full.d$Item_MRP)\ntable(full.d$Item_MRP)\n\n# Rows that are missing data of Outlet_Establishment_Year #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Establishment_Year),])\n# Number of rows, missing data of Outlet Establishment Year\nnrow(full.d[is.na(full.d$Outlet_Establishment_Year),])\n# No missing data\n\n# Exploring different types of Outlet Establishment Year\nlevels(full.d$Outlet_Establishment_Year)\ntable(full.d$Outlet_Establishment_Year)\n\n# Rows that are missing data of Outlet_Identifier #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Identifier),])\n# Number of rows, missing data of Outlet Size\nnrow(full.d[is.na(full.d$Outlet_Identifier),])\n# No missing data\n\n# Exploring different types of Outlet Size\nfactor(full.d$Item_Identifier)\nlevels(full.d$Item_Identifier)\nlevels(full.d$Outlet_Identifier)\ntable(full.d$Outlet_Identifier)\n\n# Rows that are missing data of Outlet_Size #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Size),])\n# Number of rows, missing data of Outlet Size\nnrow(full.d[is.na(full.d$Outlet_Size),])\n# No missing data\n\n# Exploring different types of Outlet Size\nlevels(full.d$Outlet_Size)\ntable(full.d$Outlet_Size)\n\n# Are all outlet size of the outlets same\nsapply(full.d[is.na(full.d$Outlet_Size),'Outlet_Identifier'],function(x)sum(!is.na(full.d[full.d$Outlet_Identifier == x,'Outlet_Size'])))\n# It seems the data of outlet of the store id not present.\n\n# are present store size are all correct\nAa <- table(full.d$Outlet_Identifier,full.d$Outlet_Size)\n\nstoresize.d <- data.frame(Outlet_Identifier=levels(full.d$Outlet_Identifier))\nstoresize.d$sumsales <- sapply(storesize.d$Outlet_Identifier,function(x)sum(full.d[full.d$Outlet_Identifier==x,'Item_Outlet_Sales'],na.rm = TRUE))\nstoresize.d$Outlet_size <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Size']))\nstoresize.d$Outlet_Location_Type <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Location_Type']))\nstoresize.d$Outlet_Type <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Type']))\nstoresize.d$Number_of_Item <- sapply(storesize.d$Outlet_Identifier,function(x)length(unique(full.d[full.d$Outlet_Identifier==x,'Item_Identifier'])))\nstoresize.d$Outlet_Establishment_Year <- sapply(storesize.d$Outlet_Identifier,function(x)unique(full.d[full.d$Outlet_Identifier==x,'Outlet_Establishment_Year']))\nstoresize.d$Age <- 2017-storesize.d$Outlet_Establishment_Year\nstr(storesize.d)\n\n\n# Imputing missing Outlet Size values by predictive imputation\n# Predictive imputation\n\n# Using 'mice' package. (Multivariate Imputation by Chained Equations)\n# 'rpart' (recursive partitioning for regression) can also be used.\n\n# Setting a random Seed\nset.seed(123)\n\n# Performing mice imputation\n# Excluding certain less-than-useful variables:\nmice_mod <- mice(storesize.d[,!names(storesize.d) %in% 'Outlet_Identifier'], method='rf') \n# The methord here is Random Forest \n\n# Saving the complete output\nmice_output <- complete(mice_mod)\n\n# Store Size\nstoresize.d$Outlet_size <- mice_output$Outlet_size\n\n# clearing mice variables\nrm(mice_mod,mice_output)\n\n# Backing up data\nBackup1 <- full.d\n#full.d <- Backup1\n\n# imputing missing values\nfull.d[is.na(full.d$Outlet_Size),'Outlet_Size'] <- sapply(as.character(full.d[is.na(full.d$Outlet_Size),'Outlet_Identifier']),function(x)storesize.d[storesize.d$Outlet_Identifier==x,'Outlet_size'])\n# as.character() is used as the factors actual value may be different\n\n\n# Rows that are missing data of Outlet_Location_Type #\n#----------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Location_Type),])\n# Number of rows, missing data of Outlet Location Type\nnrow(full.d[is.na(full.d$Outlet_Location_Type),])\n# No missing data\n\n# Exploring different types of Outlet Location Type\nlevels(full.d$Outlet_Location_Type)\ntable(full.d$Outlet_Location_Type)\n\n# Rows that are missing data of Outlet_Type #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Outlet_Type),])\n# Number of rows, missing data of Outlet Type\nnrow(full.d[is.na(full.d$Outlet_Type),])\n# No missing data\n\n# Exploring different types of Outlet Type\nlevels(full.d$Outlet_Type)\ntable(full.d$Outlet_Identifier,full.d$Outlet_Type)\n\n# Rows that are missing data of Item_Outlet_Sales #\n#------------------------------------------------#\nhead(full.d[is.na(full.d$Item_Outlet_Sales),])\n# Number of rows, missing data of Outlet Sales\nnrow(full.d[is.na(full.d$Item_Outlet_Sales),])\n# No missing data\n\n\n# Feature Engineering #\n#=====================#\n\n# Checking if there is significant change in the outlet Types #\n#-------------------------------------------------------------#\n\ntapply(full.d[!is.na(full.d$Item_Outlet_Sales),'Item_Outlet_Sales'],full.d[!is.na(full.d$Item_Outlet_Sales),'Outlet_Type'],mean)\n\ntapply(full.d[!is.na(full.d$Item_Outlet_Sales),'Item_Outlet_Sales'],full.d[!is.na(full.d$Item_Outlet_Sales),'Outlet_Type'],summary)\n\n# Plotting a boxplot\nggplot(full.d[!is.na(full.d$Item_Outlet_Sales),], aes(x = Outlet_Type, y = Item_Outlet_Sales, fill = factor(Outlet_Type))) +\n  geom_boxplot() +\n  geom_hline(aes(yintercept=mean(full.d[!is.na(full.d$Item_Outlet_Sales),'Item_Outlet_Sales'])), colour='red', linetype='dashed', lwd=2) +\n  scale_y_continuous(labels=dollar_format()) +\n  theme_few()\n\n# As the Type of stores are different they wont be altered\n\n\n# Item visibility #\n#-----------------#\n\n# Number of rows where item visibility is zero\nnrow(full.d[full.d$Item_Visibility==0,])\n\n# Imputing the zero item visibility with the mean item visibility of each store\nfull.d[full.d$Item_Visibility==0,'Item_Visibility'] <- sapply(full.d[full.d$Item_Visibility==0,'Outlet_Identifier'],function(x)mean(full.d[(!full.d$Item_Visibility == 0 & full.d$Outlet_Identifier == x),'Item_Visibility']))\n\n# Checking\nnrow(full.d[full.d$Item_Visibility==0,])==0\n\n# Making identy identifier #\n#--------------------------#\n\n# Creating a new category based on the Item Identifier\n# The Item identifier that starts with FD is for food, NC for Non Consmable and DR for Drinks\nfull.d[grep('^FD',as.character(full.d$Item_Identifier)),'Item_Category'] <- 'Food'\nfull.d[grep('^NC',as.character(full.d$Item_Identifier)),'Item_Category'] <- 'Non Consumable'\nfull.d[grep('^DR',as.character(full.d$Item_Identifier)),'Item_Category'] <- 'Drinks'\n\n# Checking if all the row are filled\nnrow(full.d[is.na(full.d$Item_Identifier),])==0\n\n# Factorizing\nfull.d$Item_Category <- factor(full.d$Item_Category)\n\n# Backing UP\nBackup1.5 =full.d\n\n# Determining The years of operation of a Outlet\nfull.d$Outler_Age <- year(now())-full.d$Outlet_Establishment_Year\n\n\n# Preprocessing #\n#===============#\n\nstr(full.d)\nbackup2 <- full.d\n#full.d <- backup2\n\n# Encoding Categorical data\nfull.d$Item_Fat_Content <- factor(full.d$Item_Fat_Content,levels = levels(full.d$Item_Fat_Content),labels = c(1:nlevels(full.d$Item_Fat_Content)))\nfull.d$Item_Type <- factor(full.d$Item_Type,levels = levels(full.d$Item_Type),labels = c(1:nlevels(full.d$Item_Type)))\n#full.d$Outlet_Establishment_Year <- factor(full.d$Outlet_Establishment_Year,levels = levels(full.d$Outlet_Establishment_Year),labels = c(1:nlevels(full.d$Outlet_Establishment_Year)))\nfull.d$Outlet_Size <- factor(full.d$Outlet_Size,levels = levels(full.d$Outlet_Size),labels = c(1:nlevels(full.d$Outlet_Size)))\nfull.d$Outlet_Location_Type <- factor(full.d$Outlet_Location_Type,levels = levels(full.d$Outlet_Location_Type),labels = c(1:nlevels(full.d$Outlet_Location_Type)))\nfull.d$Outlet_Type <- factor(full.d$Outlet_Type,levels = levels(full.d$Outlet_Type),labels = c(1:nlevels(full.d$Outlet_Type)))\nfull.d$Item_Category <- factor(full.d$Item_Category,levels = levels(full.d$Item_Category),labels = c(1:nlevels(full.d$Item_Category)))\n\n\n### Splitting the data back into the original test and training sets.\ntrainA1 <- full.d[!is.na(full.d$Item_Outlet_Sales),]\ntestA1 <- full.d[is.na(full.d$Item_Outlet_Sales),]\n\n# removing the ids\nfull.d1 <- full.d\nfull.d$Item_Identifier <- NULL\nfull.d$Outlet_Identifier <- NULL\nfull.d$Outlet_Establishment_Year <- NULL\n\n### Splitting the data back into the original test and training sets.\ntrainA<- full.d[!is.na(full.d$Item_Outlet_Sales),]\ntestA <- full.d[is.na(full.d$Item_Outlet_Sales),]\n\ntraintestA <- trainA\ntraintestA1 <- trainA1\n# Removing Null from test set\ntraintestA$Item_Outlet_Sales <- NULL\ntraintestA1$Item_Outlet_Sales <- NULL\ntestA$Item_Outlet_Sales <- NULL\n\nTest.Results <- testA1\nTrain.Results <- trainA1\n\n# Write CSV\nmakecsvsubmission <- function(dataset1, string){\n  Data1 <- data.frame(dataset1$Item_Identifier,dataset1$Outlet_Identifier, dataset1[string])\n  colnames(Data1) <- c('Item_Identifier','Outlet_Identifier','Item_Outlet_Sales')\n  string <- paste(string, ' Submission.csv',sep = \"\", collapse = NULL)\n  write.csv(Data1, file = string, row.names = F)\n}\n\n# Full data process complete \n# Backup\nbackup2.5 <- full.d\nbackuptrain1 <- trainA1\nbackuptest1 <- testA1\n#full.d <- backup2.5\n\n# Setting directory of processed data\nsetwd(\"D:\\\\Work\\\\R\\\\R Projects\\\\Big mart Sales Practice Problem\\\\Test 1\")\n\n### Exporting DATA\nwrite.csv(trainA1, file = 'Train_Processed1.csv', row.names = F)\nwrite.csv(testA1, file = 'Test_Processed1.csv', row.names = F)\nwrite.csv(full.d, file = 'full_Processed1.csv', row.names = F)\n\n\n\n# Baseline Model #\n#================#\n\n# Mean Based\n\nTest.Results$Overall_Mean_Sales <- mean(trainA1$Item_Outlet_Sales)\nTrain.Results$Overall_Mean_Sales <- mean(trainA1$Item_Outlet_Sales)\n\n\n# Outlet Mean Sales Based\n\nOutlet_mean_sales <- sapply(testA1$Outlet_Identifier,function(x)mean(trainA1[trainA1$Outlet_Identifier == x,'Item_Outlet_Sales']))\nTest.Results$Outlet_Mean_Sales <- Outlet_mean_sales\nTrain.Results$Outlet_Mean_Sales <- sapply(traintestA1$Outlet_Identifier,function(x)mean(trainA1[trainA1$Outlet_Identifier == x,'Item_Outlet_Sales']))\n\nrm(Outlet_mean_sales)\n\n# Item Mean Sales Based\n\nItem_mean_sales <- sapply(testA1$Item_Identifier,function(x)mean(trainA1[trainA1$Item_Identifier == x,'Item_Outlet_Sales']))\nTest.Results$Item_Mean_Sales <- Item_mean_sales\nTrain.Results$Item_Mean_Sales <- sapply(traintestA1$Item_Identifier,function(x)mean(trainA1[trainA1$Item_Identifier == x,'Item_Outlet_Sales']))\n\nrm(Item_mean_sales)\n\n# Backup\nwrite.csv(Test.Results, file = 'Test.Results1.csv', row.names = F)\n\n\n# Overall Mean\nmakecsvsubmission(Test.Results,'Overall_Mean_Sales')\n\n# Outlet Mean\nmakecsvsubmission(Test.Results,'Outlet_Mean_Sales')\n\n# Item Mean\nmakecsvsubmission(Test.Results,'Item_Mean_Sales')\n\nas.numeric()\nhead(Test.Results)\n\n### Predictive Modeling ###\n#=========================#\n\n# Multiple Linear Model\n# ---------------------\n\n# Fitting Multiple Linear Regression to the training set.\nregressor = lm(formula = Item_Outlet_Sales ~ ., data = trainA)\n\n# Information of the regressor\nsummary(regressor)\n\n# Predicting the Test set results\ny_pred <- predict(regressor,newdata = testA)\n\n# Saving Test results\nTest.Results$Mlinearmodel <- y_pred\nTrain.Results$Mlinearmodel <- predict(regressor,newdata = traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'Mlinearmodel')\n\n\n# Building the optimal model\n# --------------------------\n\n# Significance level is set to 95%\n# Using Backward Elimination\n# Starting with all the independent variables\n# 1st attempt all variables\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Weight + Item_Fat_Content + \n                 Item_Visibility + Item_Type +Item_MRP + Outlet_Size + \n                 Outlet_Location_Type + Outlet_Type + Item_Category + Outler_Age,\n               data = trainA)\n# Then remove the non-significant independent variable\n# Using the summary function to find the non-significant independent variable\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\n# 2nd attempt removing Item_Type\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Weight + Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Size + \n                 Outlet_Location_Type + Outlet_Type + Item_Category + Outler_Age,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\n# 3rd attempt removing Item_Weight\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Size + \n                 Outlet_Location_Type + Outlet_Type + Item_Category + Outler_Age,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\n# 4th attempt removing Item_Category\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Size + \n                 Outlet_Location_Type + Outlet_Type + Outler_Age,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\n# 5th attempt removing Outler_Age\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_Visibility + Item_MRP + Outlet_Size + \n                 Outlet_Location_Type + Outlet_Type,\n               data = trainA)\nsummary(regressor)\n\n# Removing the insignificant indpendent variable\n# 5th attempt removing Item_Visibility\nregressor = lm(formula = Item_Outlet_Sales ~ Item_Fat_Content + \n                 Item_MRP + Outlet_Size + \n                 Outlet_Location_Type + Outlet_Type,\n               data = trainA)\nsummary(regressor)\n\n# Final regressor produced\ny_pred <- predict(regressor,newdata = testA)\n\n# Saving Test results\nTest.Results$OptimalMlinearmodel <- y_pred\nTrain.Results$OptimalMlinearmodel <- predict(regressor,newdata = traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'OptimalMlinearmodel')\n\n# SUPPORT VECTOR REGRESSION #\n#===========================#\n\n# Using the e1071 package\nlibrary(e1071)\n\n# Fitting Support Vector Regression to the dataset\nregressor <- svm(formula = Item_Outlet_Sales ~., data = trainA, type = 'eps-regression')\n\n# Info about the regressor using summary() function\nsummary(regressor)\n\n# Predicting a new result with linear Regression\ny_pred = predict(regressor,testA)\n\n# Saving Test results\nTest.Results$SVMRegression <- y_pred\nTrain.Results$SVMRegression <- predict(regressor,traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'SVMRegression')\n\n# DECISION REGRESSION #\n#=====================#\n\n# Using the rpart package\nlibrary(rpart)\n\n# Fitting Decision Regression to the dataset\nregressor <- rpart(formula = Item_Outlet_Sales ~., data = trainA, control = rpart.control(minsplit = 50))\n\n# Info about the regressor using summary() function\nsummary(regressor)\n\n# Predicting a new result with linear Regression\ny_pred = predict(regressor,testA)\n\n# Saving Test results\nTest.Results$DecisionRegression <- y_pred\nTrain.Results$DecisionRegression <- predict(regressor,traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'DecisionRegression')\n\n\n# RANDOM FOREST REGRESSION #\n#==========================#\n\n# Using the rpart package\nlibrary(randomForest)\n\n# Setting seed\nset.seed(1234)\n\n# Fitting Random Forest Regression to the dataset\nregressor <- randomForest(x = traintestA, y = trainA$Item_Outlet_Sales, ntree = 500, nodesize = 80)\n\n# Info about the regressor using summary() function\nsummary(regressor)\n\n# Predicting a new result with linear Regression\ny_pred = predict(regressor,testA)\n\n# Saving Test results\nTest.Results$RandomForestRegression <- y_pred\nTrain.Results$RandomForestRegression <- predict(regressor,traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'RandomForestRegression')\n\n\n# MEGA Multiple Linear Model\n# --------------------------\n\n# Setting up training and test data\ntrainA <- Train.Results[c('Item_Outlet_Sales','Overall_Mean_Sales','Outlet_Mean_Sales','Item_Mean_Sales','Mlinearmodel','OptimalMlinearmodel','SVMRegression','DecisionRegression','RandomForestRegression')] \ntestA <- Test.Results[c('Overall_Mean_Sales','Outlet_Mean_Sales','Item_Mean_Sales','Mlinearmodel','OptimalMlinearmodel','SVMRegression','DecisionRegression','RandomForestRegression')] \ntraintestA <-Train.Results[c('Overall_Mean_Sales','Outlet_Mean_Sales','Item_Mean_Sales','Mlinearmodel','OptimalMlinearmodel','SVMRegression','DecisionRegression','RandomForestRegression')] \n\n\n# Fitting Multiple Linear Regression to the training set.\nregressor = lm(formula = Item_Outlet_Sales ~ ., data = trainA)\n\n# Information of the regressor\nsummary(regressor)\n\n# Predicting the Test set results\ny_pred <- predict(regressor,newdata = testA)\n\n# Saving Test results\nTest.Results$Megalinearmodel <- y_pred\nTrain.Results$Megalinearmodel <- predict(regressor,newdata = traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'Megalinearmodel')\n\n# Mega RANDOM FOREST REGRESSION #\n#===============================#\n\n# Setting up training and test data\ntrainA <- Train.Results[c('Item_Outlet_Sales','Overall_Mean_Sales','Outlet_Mean_Sales','Item_Mean_Sales','Mlinearmodel','OptimalMlinearmodel','SVMRegression','DecisionRegression','RandomForestRegression')] \ntestA <- Test.Results[c('Overall_Mean_Sales','Outlet_Mean_Sales','Item_Mean_Sales','Mlinearmodel','OptimalMlinearmodel','SVMRegression','DecisionRegression','RandomForestRegression')] \ntraintestA <-Train.Results[c('Overall_Mean_Sales','Outlet_Mean_Sales','Item_Mean_Sales','Mlinearmodel','OptimalMlinearmodel','SVMRegression','DecisionRegression','RandomForestRegression')] \n\n# Using the rpart package\nlibrary(randomForest)\n\n# Setting seed\nset.seed(1234)\n\n# Fitting Random Forest Regression to the dataset\nregressor <- randomForest(x = traintestA, y = trainA$Item_Outlet_Sales, ntree = 500, nodesize = 1)\n\n# Info about the regressor using summary() function\nsummary(regressor)\n\n# Predicting a new result with linear Regression\ny_pred = predict(regressor,testA)\n\n# Saving Test results\nTest.Results$MegaRandomForestRegression <- y_pred\nTrain.Results$MegaRandomForestRegression <- predict(regressor,traintestA)\n\n# Saving results for submission\nmakecsvsubmission(Test.Results,'MegaRandomForestRegression')\n\n\n",
    "created" : 1514626007410.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3311993330",
    "id" : "79A7E899",
    "lastKnownWriteTime" : 1514631806,
    "last_content_update" : 1514631806318,
    "path" : "D:/Work/R/R Projects/Big mart Sales Practice Problem/Test 1/Bigmart 1.R",
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 13,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}